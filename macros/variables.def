subcode:: java_init
    $(for:public,private)
        $global $$1_hash, $$1_list
        $$1_hash={}
        $$1_list=[]
    push @$(super:scope_stack), {var_hash=>$public_hash, var_list=>$public_list}
    push @$(super:scope_stack), {var_hash=>$private_hash, var_list=>$private_list}

subcode:: java_parse
    $elif $l=~/^\$\b(global|public|private)\s*(.*)/
        my $param=$2
        my ($h, $l)
        $if $1 eq "public"
            ($h, $l)=($public_hash, $public_list)
        $elif $1 eq "private"
            ($h, $l)=($private_hash, $private_list)
        $else
            $call warn, "\$$1 not supported in java, use \$public or \$private\n"
            return
        my @plist = MyDef::utils::proper_split($param)
        $foreach $p in @plist
            my $val
            $if $p=~/(.*?)\s*=\s*(.*)/
                $p=$1
                $val = $2
            my $name=$(super:f_add_var)($h, $l, $p)
            $if $val
                push @$out, "$p = $val;"
        return

#----------------------------------------------- 
subcode:: java_parse
    $elif $l=~/^(\w+)\s*=\s*new\s*(\w+)\s*(.*)\s*;?/
        my ($v, $cls, $p)=($1, $2, $3)
        my $type = $cls
        $if $p=~/<(.*?)>(.*)/
            $type = "$cls<$1>"
            $cls = "$cls<>"
            $p = $2
        $elif $p=~/\[(.*?)\](.*)/
            $type = "$cls"."[]"
        $(super:auto_add_var)($v, $type)

        $if !$p
            push @$out, "$v = new $cls();"
        $elif $p=~/^\((.*)\)/
            push @$out, "$v = new $cls$p;"
        $elif $p=~/^\[(.*)\]/
            push @$out, "$v = new $cls$p;"
        $else
            push @$out, "$v = new $cls($p);"

        $if $common_classes{$cls}
            add_import($common_classes{$cls})

        return

subcode: _autoload
    $global %common_classes
    %common_classes=(
        Random => "java.util.Random",
        "ArrayList<>" => "java.util.*",
    );

