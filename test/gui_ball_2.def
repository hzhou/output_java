include: java/gui.def

page: test, gui_frame
    module: java
    title: Test Canvas
    size: 820, 650

    $private n_w=800, n_h=600

    $call init_random
    $call init_balls, 100

    &call add_canvas, canvas, n_w, n_h
        &call each_ball
            $(o).draw(g)

    &call animate, 20, 500
        &call each_ball
            $(o).update()

        canvas.repaint()

    canvas.setBackground(Color.GRAY)
    #-------------------------------------------- 
    $struct(ball) f_x, f_y, f_r, f_dx, f_dy, Color c, f_alpha

    subcode: init_balls(N)
        $private ball[] balls
        balls = new ball[$(N)](n_w/2, n_h/2)

    subcode: each_ball
        $for i=0:balls.length
            $(set:o=balls[i])
            BLOCK

    fncode: ball.__init(int x, int y)
        f_x = (float)x;
        f_y = (float)y;
        f_r = 5;

        tf_v = 2.0 + $(rand)*5
        tf_a = $(rand)*6.28
        f_dx = tf_v * Math.cos(tf_a);
        f_dy = tf_v * Math.sin(tf_a); 

        c = Color.blue;
        f_alpha = 1.0;

    fncode: ball.update
        $(for:x,y)
            f_$1 += f_d$1
        $(if:1) # bouce off walls
            $(for:x,y and n_w, n_h)
                $if f_$1+f_r>$2 || f_$1-f_r<0
                    f_d$1 = -f_d$1;
        $(if:0) # air friction
            $(for:x,y)
                f_d$1 *= 1-0.02

    fncode: ball.draw(Graphics2D g2)
        g2.setColor(c)
        tn_x =(int)(f_x-f_r)
        tn_y =(int)(f_y-f_r)
        tn_w =(int)(f_r*2)
        g2.fillOval(tn_x, tn_y, tn_w, tn_w)

