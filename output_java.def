include: output.def
include: macros/variables.def
include: macros/print.def
include: macros/type.def

page: output_java, inherit, c
    output_dir: lib/MyDef
    ext: java
    package: MyDef::output_java

    subcode: on_init_pre
        $page->{autolist}=1

    subcode: on_init
        $call @java_init

    #-------------------
    subcode: on_parsecode
        $if $l=~/^\$import\s*(.*)/
            $foreach $p in split /,\s*/, $1
                add_import($p)
            return
        $elif $l=~/^\$print\s*(.*)/
            parse_print($1)
            return
        $elif $l=~/^\$foreach\s*(.+) in (.+)/
            return $(super:single_block)("for($1 : $2){", "}")
        $call @java_parse
    #--------------------
    subcode: on_dumpout
        my $page=$$(super:page)
        $if $page->{package}
            push @$f, "package $page->{package};\n"
        $call dump_import
        $call class_wrap
        $call dump_public_private

        my $funclist=\@$(super:function_list)
        $foreach $func in @$funclist
            $call process_function_java
            $func->{skip_declare}=1
            $func->{processed}=1

        MyDef::dumpout::dumpout({out=>$out,f=>$f})
        return

        # -------------------
        subcode: class_wrap
            my $t = "public class $page->{_pagename}"
            $call class_extends_implements

            push @$f, "$t {\n"

            unshift @$out, "INDENT"
            push @$out, "DEDENT", "}\n"

        subcode: dump_public_private
            $(for:public,private)
                $if @$$1_list
                    $foreach $name in @$$1_list
                        my $v = $$1_hash->{$name}
                        my $decl=$(super:var_declare)($v)
                        push @$f, "    $1 $decl;\n"
                    push @$f, "\n"

        subcode: process_function_java
            my $name=$func->{name}
            $if $name eq "main"
                $func->{skip_makefile}=1
                $func->{ret_type}="public static void"
                $func->{param_list}=["String[] args"]
            $elif $name =~/(\w*)_init/
                $func->{ret_type}="public"
                $func->{name}=$page->{_pagename}
            $else
                $if !$func->{ret_type}
                    $func->{ret_type}="void"
                $func->{ret_type}="public $func->{ret_type}"

            $(super:process_function_std)($func)

#---- import ---------------------------- 
subcode:: java_init
    $global @import_list, %import_hash
    @import_list=()
    %import_hash=()

fncode: add_import($l)
    $if !$import_hash{$l}
        $import_hash{$l}=1
        push @import_list, $l

subcode: dump_import
    $if @import_list
        push @$f, "\n"
        $foreach $imp in @import_list
            push @$f, "import $imp;\n"
        push @$f, "\n"

#---- extends, implements
subcode:: java_init
    $global @extends, @implements
    @extends=()
    @implements=()

subcode:: java_parse
    $elif $l=~/^\$extends\s*(.+)/
        push @extends, $1
        return
    $elif $l=~/^\$implements\s*(.+)/
        push @implements, $1
        return

subcode: class_extends_implements
    $if @extends
        $t .= " extends ".join(", ", @extends)
    $if @implements
        $t .= " implements ".join(", ", @implements)
#---------------------------------------- 
